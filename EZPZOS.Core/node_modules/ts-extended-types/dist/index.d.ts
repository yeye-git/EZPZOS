/**
 * Type that represents a floating point number with double precision. It can be assigned to a number, but it cannot be assigned from a number.
 */
export declare type double = number & {
    ___double___: never;
};
/**
 * Returns `true` if the value is a `double` number, otherwise returns `false`
 *
 * @param value Value to verify if it is a `double`
 */
export declare function isDouble(value: any): value is double;
/**
 * Cast the number provided by argument as `double`
 *
 * @param value Number to be casted to `double`
 */
export declare function asDouble(value: number): double;
/**
 * Type that represents a floating point number with double precision; it can be so long that can be represented using a string instead of a number
 */
export declare type stringDouble = double | (string & {
    ___stringDouble___: never;
});
/**
 * Returns `true` if the value is a `stringDouble` number, otherwise returns `false`
 *
 * @param value Value to verify if it is a `stringDouble`
 */
export declare function isStringDouble(value: any): value is stringDouble;
/**
 * Cast the number provided by argument as `stringDouble`, throws an error if the provided number is not a double
 *
 * @param value Number to be casted to `stringDouble`
 */
export declare function asStringDouble(value: number | string): stringDouble;
/**
 * Type that represents a integer number. It can be assigned to a number, but it cannot be assigned from a number.
 */
export declare type int = number & {
    ___int___: never;
};
/**
 * Returns `true` if the value is a `int` number, otherwise returns `false`
 *
 * @param value Value to verify if it is a `int`
 */
export declare function isInt(value: any): value is int;
/**
 * Cast the number provided by argument as `int`, throws an error if the provided number is not an integer
 *
 * @param value Number to be casted to `int`
 */
export declare function asInt(value: number): int;
/**
 * Round the provided number to an integer and then cast it to `int`
 *
 * @param value Number to be rounded and casted to `int`
 */
export declare function roundToInt(value: number): int;
/**
 * Truncate the provided number to an integer and then cast it to `int`
 *
 * @param value Number to be truncated and casted to `int`
 */
export declare function truncateToInt(value: number): int;
/**
 * Floor the provided number to an integer and then cast it to `int`
 *
 * @param value Number to be floored and casted to `int`
 */
export declare function floorToInt(value: number): int;
/**
 * Ceil the provided number to an integer and then cast it to `int`
 *
 * @param value Number to be ceiled and casted to `int`
 */
export declare function ceilToInt(value: number): int;
/**
 * Yype that represents a integer number. It can be assigned to a number, but it cannot be assigned from a number: it can be so long that can be represented using a string instead of a number
 */
export declare type stringInt = int | (string & {
    ___stringInt___: never;
});
/**
 * Returns `true` if the value is a `stringInt` number, otherwise returns `false`
 *
 * @param value Value to verify if it is a `stringInt`
 */
export declare function isStringInt(value: any): value is stringInt;
/**
 * Cast the number provided by argument as `stringInt`, throws an error if the provided number is not an integer
 *
 * @param value Number to be casted to `stringInt`
 */
export declare function asStringInt(value: number | string): stringInt;
/**
 * Round the provided number to an integer and then cast it to `stringInt`
 *
 * @param value Number to be rounded and casted to `stringInt`
 */
export declare function roundToStringInt(value: number): stringInt;
/**
 * Truncate the provided number to an integer and then cast it to `stringInt`
 *
 * @param value Number to be truncated and casted to `stringInt`
 */
export declare function truncateToStringInt(value: number): stringInt;
/**
 * Floor the provided number to an integer and then cast it to `stringInt`
 *
 * @param value Number to be floored and casted to `stringInt`
 */
export declare function floorToStringInt(value: number): stringInt;
/**
 * Ceil the provided number to an integer and then cast it to `stringInt`
 *
 * @param value Number to be ceiled and casted to `stringInt`
 */
export declare function ceilToStringInt(value: number): stringInt;
/**
 * type that represents a local date with time (without timezone)
 */
export interface LocalDateTime {
    ___type___: 'LocalDateTime';
    /** Gets the year */
    getFullYear(): int;
    /** Gets the month (value between 0 to 11) */
    getMonth(): int;
    /** Gets the day-of-the-month */
    getDate(): int;
    /** Gets the day of the week (0 represents Sunday) */
    getDay(): int;
    /** Gets the hours */
    getHours(): int;
    /** Gets the minutes */
    getMinutes(): int;
    /** Gets the seconds */
    getSeconds(): int;
    /** Gets the milliseconds */
    getMilliseconds(): int;
    /** Gets the time value in milliseconds */
    getTime(): int;
}
/**
 * Create a new `LocalDateTime`
 */
export declare function createLocalDateTime(): LocalDateTime;
export declare function createLocalDateTime(date: Date): LocalDateTime;
export declare function createLocalDateTime(year: number, month: number, date: number, hours?: number, minutes?: number, seconds?: number, milliseconds?: number): LocalDateTime;
/**
 * Returns `true` if the value is a `LocalDateTime`, otherwise returns `false`
 *
 * @param value Value to verify if it is a `LocalDateTime`
 */
export declare function isLocalDateTime(value: any): value is LocalDateTime;
/**
 * Type that represents a local date without time (without timezone)
 */
export interface LocalDate {
    ___type___: 'LocalDate';
    /** Gets the year */
    getFullYear(): int;
    /** Gets the month (value between 0 to 11) */
    getMonth(): int;
    /** Gets the day-of-the-month */
    getDate(): int;
    /** Gets the day of the week (0 represents Sunday) */
    getDay(): int;
}
/**
 * Create a new `LocalDate`
 */
export declare function createLocalDate(): LocalDate;
export declare function createLocalDate(date: Date): LocalDate;
export declare function createLocalDate(year: number, month: number, date: number): LocalDate;
/**
 * Returns `true` if the value is a `LocalDate`, otherwise returns `false`
 *
 * @param value Value to verify if it is a `LocalDate`
 */
export declare function isLocalDate(value: any): value is LocalDate;
/**
 * Type that represents a local time without date (without timezone)
 */
export interface LocalTime {
    ___type___: 'LocalTime';
    /** Gets the hours */
    getHours(): int;
    /** Gets the minutes */
    getMinutes(): int;
    /** Gets the seconds */
    getSeconds(): int;
    /** Gets the milliseconds */
    getMilliseconds(): int;
}
/**
 * Create a new `LocalTime`
 */
export declare function createLocalTime(): LocalTime;
export declare function createLocalTime(date: Date): LocalTime;
export declare function createLocalTime(hours: number, minutes?: number, seconds?: number, milliseconds?: number): LocalTime;
/**
 * Returns `true` if the value is a `LocalTime`, otherwise returns `false`
 *
 * @param value Value to verify if it is a `LocalTime`
 */
export declare function isLocalTime(value: any): value is LocalTime;
/**
 * Type that represents an uuid string. It can be assigned to a string, but it cannot be assigned from a string.
 */
export declare type uuid = string & {
    ___uuid___: never;
};
/**
 * Returns `true` if the value is a `uuid` string, otherwise returns `false`
 *
 * @param value Value to verify if it is a `uuid`
 */
export declare function isUuid(value: any): value is uuid;
/**
 * Cast the string provided by argument as `uuid`, throws an error if the provided string is not a uuid
 *
 * @param value String to be casted to `uuid`
 */
export declare function asUuid(value: string): uuid;
