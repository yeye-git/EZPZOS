"use strict";
/*
 * All symbols defined here are expected to don't have value
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ifValueSourceType = exports.booleanValueSourceType = exports.comparableValueSourceType = exports.equalableValueSourceType = exports.nullableValueSourceType = exports.valueSourceTypeName = exports.valueSourceType = exports.nextMethodNotSupportedByThisConnection = exports.sqlServerType = exports.sqliteType = exports.postgreSqlType = exports.oracleType = exports.noopDBType = exports.mySqlType = exports.mariaDBType = exports.typeUnsafeDBType = exports.typeSafeDBType = exports.anyDBType = exports.databaseName = exports.computedValue = exports.primaryKeyValue = exports.autogeneratedPrimaryKeyValue = exports.optionalValue = exports.hasDefaultValue = exports.optionalType = exports.valueType = exports.valuesForInsert = exports.oldValues = exports.outerJoinAlias = exports.outerJoinTableOrView = exports.outerJoinDatabase = exports.noTableOrViewRequired = exports.tableOrViewAlias = exports.viewName = exports.tableName = exports.requiredTableOrView = exports.resolvedShape = exports.rawFragment = exports.compoundableColumns = exports.columnsType = exports.resultType = exports.tableOrViewCustomName = exports.tableOrViewRefType = exports.tableOrViewRef = exports.tableOrView = exports.database = exports.type = exports.isSelectQueryObject = exports.isColumnObject = exports.isValueSourceObject = void 0;
exports.neverUsedSymbol = exports.dontCallConstructor = exports.aggregatedArrayValueSourceType = exports.customLocalDateTimeValueSourceType = exports.customLocalTimeValueSourceType = exports.customLocalDateValueSourceType = exports.localDateTimeValueSourceType = exports.localTimeValueSourceType = exports.localDateValueSourceType = exports.dateTimeValueSourceType = exports.timeValueSourceType = exports.dateValueSourceType = exports.typeSafeUuidValueSourceType = exports.customUuidValueSourceType = exports.uuidValueSourceType = exports.typeSafeStringValueSourceType = exports.stringValueSourceType = exports.stringDoubleValueSourceType = exports.stringIntValueSourceType = exports.customDoubleValueSourceType = exports.customIntValueSourceType = exports.typeSafeBigintValueSourceType = exports.bigintValueSourceType = exports.doubleValueSourceType = exports.intValueSourceType = exports.stringNumberValueSourceType = exports.numberValueSourceType = exports.anyBooleanValueSourceType = void 0;
// Type marks
exports.isValueSourceObject = Symbol('isValueSourceObject');
exports.isColumnObject = Symbol('isColumnObject');
exports.isSelectQueryObject = Symbol('isSelectQueryObject');
// General Symbols
exports.type = Symbol('type');
exports.database = Symbol('database');
exports.tableOrView = Symbol('tableOrView');
exports.tableOrViewRef = Symbol('tableOrViewRef');
exports.tableOrViewRefType = Symbol('tableOrViewRef');
exports.tableOrViewCustomName = Symbol('tableOrViewCustomName');
exports.resultType = Symbol('resultType');
exports.columnsType = Symbol('columnsType');
exports.compoundableColumns = Symbol('compoundableColumns');
exports.rawFragment = Symbol('rawFragment');
exports.resolvedShape = Symbol('resolvedShape');
// Expressions
exports.requiredTableOrView = Symbol('requiredTableOrView');
// Tables or Views
exports.tableName = Symbol('tableName');
exports.viewName = Symbol('viewName');
exports.tableOrViewAlias = Symbol('tableOrViewAlias');
exports.noTableOrViewRequired = Symbol('noTableOrViewRequiredType');
exports.outerJoinDatabase = Symbol('outerJoinDatabase');
exports.outerJoinTableOrView = Symbol('outerJoinTableOrView');
exports.outerJoinAlias = Symbol('outerJoinAlias');
exports.oldValues = Symbol('oldValues');
exports.valuesForInsert = Symbol('valuesForInsert');
// Columns
exports.valueType = Symbol('valueType');
exports.optionalType = Symbol('optionalType');
exports.hasDefaultValue = Symbol('hasDefaultValue');
exports.optionalValue = Symbol('optionalValue');
exports.autogeneratedPrimaryKeyValue = Symbol('autogeneratedPrimaryKeyValue');
exports.primaryKeyValue = Symbol('primaryKeyValue');
exports.computedValue = Symbol('computedValue');
// Connection
exports.databaseName = Symbol('databaseName');
// Database type
exports.anyDBType = Symbol('anyDBType');
exports.typeSafeDBType = Symbol('typeSafeDBType');
exports.typeUnsafeDBType = Symbol('typeUnsafeDBType');
exports.mariaDBType = Symbol('mariaDBType');
exports.mySqlType = Symbol('mySqlType');
exports.noopDBType = Symbol('noopDBType');
exports.oracleType = Symbol('oracleType');
exports.postgreSqlType = Symbol('postgreSqlType');
exports.sqliteType = Symbol('sqliteType');
exports.sqlServerType = Symbol('sqlServerType');
exports.nextMethodNotSupportedByThisConnection = Symbol('nextMethodNotSupportedByThisConnection');
// Value source type
exports.valueSourceType = Symbol('valueSourceType');
exports.valueSourceTypeName = Symbol('valueSourceTypeName');
exports.nullableValueSourceType = Symbol('nullableValueSourceType');
exports.equalableValueSourceType = Symbol('equalableValueSourceType');
exports.comparableValueSourceType = Symbol('comparableValueSourceType');
exports.booleanValueSourceType = Symbol('booleanValueSourceType');
exports.ifValueSourceType = Symbol('ifValueSourceType');
exports.anyBooleanValueSourceType = Symbol('anyBooleanValueSourceType');
exports.numberValueSourceType = Symbol('numberValueSourceType');
exports.stringNumberValueSourceType = Symbol('stringNumberValueSourceType');
exports.intValueSourceType = Symbol('intValueSourceType');
exports.doubleValueSourceType = Symbol('doubleValueSourceType');
exports.bigintValueSourceType = Symbol('bigintValueSourceType');
exports.typeSafeBigintValueSourceType = Symbol('typeSafeBigintValueSourceType');
exports.customIntValueSourceType = Symbol('customIntValueSourceType');
exports.customDoubleValueSourceType = Symbol('customDoubleValueSourceType');
exports.stringIntValueSourceType = Symbol('stringIntValueSourceType');
exports.stringDoubleValueSourceType = Symbol('stringDoubleValueSourceType');
exports.stringValueSourceType = Symbol('stringValueSourceType');
exports.typeSafeStringValueSourceType = Symbol('typeSafeStringValueSourceType');
exports.uuidValueSourceType = Symbol('uuidValueSourceType');
exports.customUuidValueSourceType = Symbol('customUuidValueSourceType');
exports.typeSafeUuidValueSourceType = Symbol('typeSafeUuidValueSourceType');
exports.dateValueSourceType = Symbol('dateValueSourceType');
exports.timeValueSourceType = Symbol('timeValueSourceType');
exports.dateTimeValueSourceType = Symbol('dateTimeValueSourceType');
exports.localDateValueSourceType = Symbol('localDateValueSourceType');
exports.localTimeValueSourceType = Symbol('localTimeValueSourceType');
exports.localDateTimeValueSourceType = Symbol('localDateTimeValueSourceType');
exports.customLocalDateValueSourceType = Symbol('customLocalDateValueSourceType');
exports.customLocalTimeValueSourceType = Symbol('customLocalTimeValueSourceType');
exports.customLocalDateTimeValueSourceType = Symbol('customLocalDateTimeValueSourceType');
exports.aggregatedArrayValueSourceType = Symbol('aggregatedArrayValueSourceType');
// Opaque types
exports.dontCallConstructor = Symbol('dontCallConstructor');
exports.neverUsedSymbol = Symbol('neverUsedSymbol');
