"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullAllowWhenAggregateValueAsArrayValueSource = exports.NullAggregateValueAsArrayValueSource = exports.AllowWhenAggregateValueAsArrayValueSource = exports.AggregateValueAsArrayValueSource = exports.NullAllowWhenAggregateSelectValueSource = exports.NullAggregateSelectValueSource = exports.AllowWhenAggregateSelectValueSource = exports.AggregateSelectValueSource = exports.InlineSelectValueSource = exports.AllowWhenTableOrViewRawFragmentValueSource = exports.TableOrViewRawFragmentValueSource = exports.AggregateFunctions1or2ValueSource = exports.AggregateFunctions1ValueSource = exports.NullValueSource = exports.AggregateFunctions0ValueSource = exports.AllowWhenValueSource = exports.ValueSourceFromBuilder = exports.FragmentValueSource = exports.SequenceValueSource = exports.NoopValueSource = exports.SqlOperation2ValueSourceIfValueOrIgnore = exports.SqlOperation2ValueSource = exports.SqlOperation1ValueSourceIfValueOrIgnore = exports.SqlOperationValueSourceIfValueAlwaysNoop = exports.SqlOperationInValueSourceIfValueOrNoop = exports.SqlOperation1ValueSourceIfValueOrNoop = exports.SqlOperation1NotOptionalValueSource = exports.SqlOperationValueWhenNullValueSource = exports.SqlOperationInValueSource = exports.SqlOperation1ValueSource = exports.SqlOperationIsNullValueSource = exports.SqlOperation0ValueSource = exports.SqlOperationConstValueSource = exports.SqlOperationStatic1ValueSource = exports.ValueWhenNoValueValueSource = exports.BooleanValueWhenNoValueValueSource = exports.SqlOperationStaticBooleanValueSource = exports.SqlOperationStatic0ValueSource = exports.ValueSourceImpl = void 0;
const SqlBuilder_1 = require("../sqlBuilders/SqlBuilder");
const values_1 = require("../expressions/values");
const TypeAdapter_1 = require("../TypeAdapter");
const ITableOrView_1 = require("../utils/ITableOrView");
const symbols_1 = require("../utils/symbols");
const ITableOrView_2 = require("../utils/ITableOrView");
const values_2 = require("../expressions/values");
const ProxyTypeAdapter_1 = require("./ProxyTypeAdapter");
class ValueSourceImpl {
    constructor(valueType, valueTypeName, optionalType, typeAdapter, aggregatedArrayColumns, aggregatedArrayMode, uuidString) {
        this[_a] = true;
        this.__valueType = valueType;
        this.__valueTypeName = valueTypeName;
        this.__optionalType = optionalType;
        this.__typeAdapter = typeAdapter;
        if (aggregatedArrayColumns) {
            this.__aggregatedArrayColumns = aggregatedArrayColumns;
            this.__aggregatedArrayMode = aggregatedArrayMode;
        }
        if (uuidString) {
            this.__uuidString = uuidString;
        }
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    __addWiths(_sqlBuilder, _withs) {
        // Do nothing
    }
    __registerTableOrView(_sqlBuilder, _requiredTablesOrViews) {
        // Do nothing
    }
    __registerRequiredColumn(_sqlBuilder, _requiredColumns, _onlyForTablesOrViews) {
        // Do nothing
    }
    __getOldValues(_sqlBuilder) {
        return undefined;
    }
    __getValuesForInsert(_sqlBuilder) {
        return undefined;
    }
    __isAllowed(_sqlBuilder) {
        return true;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        let result;
        if (typeof error === 'string') {
            result = new AllowWhenValueSource(when, new Error(error), this);
        }
        else {
            result = new AllowWhenValueSource(when, error, this);
        }
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    disallowWhen(when, error) {
        let result;
        if (typeof error === 'string') {
            result = new AllowWhenValueSource(!when, new Error(error), this);
        }
        else {
            result = new AllowWhenValueSource(!when, error, this);
        }
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    asOptional() {
        const result = new NoopValueSource(this, this.__valueType, this.__valueTypeName, 'optional', this.__typeAdapter);
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    asRequiredInOptionalObject() {
        const result = new NoopValueSource(this, this.__valueType, this.__valueTypeName, 'requiredInOptionalObject', this.__typeAdapter);
        if (this.__aggregatedArrayColumns) {
            result.__aggregatedArrayColumns = this.__aggregatedArrayColumns;
            result.__aggregatedArrayMode = this.__aggregatedArrayMode;
        }
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    useEmptyArrayForNoValue() {
        const result = new NoopValueSource(this, this.__valueType, this.__valueTypeName, 'required', this.__typeAdapter);
        if (this.__aggregatedArrayColumns) {
            result.__aggregatedArrayColumns = this.__aggregatedArrayColumns;
            result.__aggregatedArrayMode = this.__aggregatedArrayMode;
        }
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    asOptionalNonEmptyArray() {
        const result = new NoopValueSource(this, this.__valueType, this.__valueTypeName, 'optional', this.__typeAdapter);
        if (this.__aggregatedArrayColumns) {
            result.__aggregatedArrayColumns = this.__aggregatedArrayColumns;
            result.__aggregatedArrayMode = this.__aggregatedArrayMode;
        }
        if (this.__uuidString) {
            result.__uuidString = this.__uuidString;
        }
        return result;
    }
    projectingOptionalValuesAsNullable() {
        return this;
    }
    // SqlComparator0
    isNull() {
        return condition(new SqlOperationIsNullValueSource('_isNull', this, 'boolean', 'boolean', 'required', this.__typeAdapter));
    }
    isNotNull() {
        return condition(new SqlOperationIsNullValueSource('_isNotNull', this, 'boolean', 'boolean', 'required', this.__typeAdapter));
    }
    // SqlComparator1
    equalsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_equals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    equals(value) {
        return condition(new SqlOperation1ValueSource('_equals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEqualsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEquals(value) {
        return condition(new SqlOperation1ValueSource('_notEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    isIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_is', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    is(value) {
        return condition(new SqlOperation1NotOptionalValueSource('_is', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    isNotIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_isNot', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    isNot(value) {
        return condition(new SqlOperation1NotOptionalValueSource('_isNot', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    asString() {
        const result = new SqlOperation0ValueSource('_asString', this, 'string', 'string', this.__optionalType, this.__typeAdapter);
        result.__uuidString = this.__valueType === 'uuid' || this.__valueType === 'customUuid';
        return result;
    }
    onlyWhenOrNull(when) {
        if (when) {
            return this;
        }
        else {
            return new NullValueSource(this.__valueType, this.__valueTypeName, 'optional', this.__typeAdapter);
        }
    }
    ignoreWhenAsNull(when) {
        if (when) {
            return new NullValueSource(this.__valueType, this.__valueTypeName, 'optional', this.__typeAdapter);
        }
        else {
            return this;
        }
    }
    equalsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_equalsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    equalsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_equalsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEqualsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEqualsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEqualsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notEqualsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use lessThanIfValue method instead */
    smallerIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_lessThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use lessThan method instead */
    smaller(value) {
        return condition(new SqlOperation1ValueSource('_lessThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use greaterThanIfValue method instead */
    largerIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_greaterThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use greaterThan method instead */
    larger(value) {
        return condition(new SqlOperation1ValueSource('_greaterThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use lessOrEqualsIfValue method instead */
    smallAsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_lessOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use lessOrEquals method instead */
    smallAs(value) {
        return condition(new SqlOperation1ValueSource('_lessOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use greaterOrEqualsIfValue method instead */
    largeAsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_greaterOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    /** @deprecated use greaterOrEquals method instead */
    largeAs(value) {
        return condition(new SqlOperation1ValueSource('_greaterOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    lessThanIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_lessThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    lessThan(value) {
        return condition(new SqlOperation1ValueSource('_lessThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    greaterThanIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_greaterThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    greaterThan(value) {
        return condition(new SqlOperation1ValueSource('_greaterThan', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    lessOrEqualsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_lessOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    lessOrEquals(value) {
        return condition(new SqlOperation1ValueSource('_lessOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    greaterOrEqualsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_greaterOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    greaterOrEquals(value) {
        return condition(new SqlOperation1ValueSource('_greaterOrEquals', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    inIfValue(value) {
        return condition(new SqlOperationInValueSourceIfValueOrNoop('_in', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    in(value) {
        return condition(new SqlOperationInValueSource('_in', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notInIfValue(value) {
        return condition(new SqlOperationInValueSourceIfValueOrNoop('_notIn', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notIn(value) {
        return condition(new SqlOperationInValueSource('_notIn', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    inN(...value) {
        return condition(new SqlOperationInValueSource('_in', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notInN(...value) {
        return condition(new SqlOperationInValueSource('_notIn', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    likeIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_like', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    like(value) {
        return condition(new SqlOperation1ValueSource('_like', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notLikeIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notLike', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notLike(value) {
        return condition(new SqlOperation1ValueSource('_notLike', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    likeInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_likeInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    likeInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_likeInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notLikeInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notLikeInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notLikeInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notLikeInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    startsWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_startsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    startsWith(value) {
        return condition(new SqlOperation1ValueSource('_startsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notStartsWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notStartsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notStartsWith(value) {
        return condition(new SqlOperation1ValueSource('_notStartsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    endsWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_endsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    endsWith(value) {
        return condition(new SqlOperation1ValueSource('_endsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEndsWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEndsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEndsWith(value) {
        return condition(new SqlOperation1ValueSource('_notEndsWith', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    startsWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_startsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    startsWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_startsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notStartsWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notStartsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notStartsWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notStartsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    endsWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_endsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    endsWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_endsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEndsWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEndsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notEndsWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notEndsWithInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    containsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_contains', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    contains(value) {
        return condition(new SqlOperation1ValueSource('_contains', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notContainsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notContains', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notContains(value) {
        return condition(new SqlOperation1ValueSource('_notContains', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    containsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_containsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    containsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_containsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notContainsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notContainsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notContainsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notContainsInsensitive', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    // SqlComparator2
    between(value, value2) {
        return condition(new SqlOperation2ValueSource('_between', this, value, value2, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    notBetween(value, value2) {
        return condition(new SqlOperation2ValueSource('_notBetween', this, value, value2, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    // SqlFunctionStatic: never used here
    // SqlFunction0
    // Boolean
    negate() {
        return condition(new SqlOperation0ValueSource('_negate', this, 'boolean', 'boolean', this.__optionalType, this.__typeAdapter));
    }
    onlyWhen(condition) {
        if (condition) {
            return this;
        }
        else {
            return new SqlOperationValueSourceIfValueAlwaysNoop();
        }
    }
    ignoreWhen(condition) {
        if (condition) {
            return new SqlOperationValueSourceIfValueAlwaysNoop();
        }
        else {
            return this;
        }
    }
    trueWhenNoValue() {
        const result = new BooleanValueWhenNoValueValueSource('_true', this, 'boolean', 'boolean', this.__optionalType, this.__typeAdapter);
        result.__isBooleanForCondition = this.__isBooleanForCondition;
        return result;
    }
    falseWhenNoValue() {
        const result = new BooleanValueWhenNoValueValueSource('_false', this, 'boolean', 'boolean', this.__optionalType, this.__typeAdapter);
        result.__isBooleanForCondition = this.__isBooleanForCondition;
        return result;
    }
    valueWhenNoValue(value) {
        if (value === true) {
            return this.trueWhenNoValue();
        }
        if (value === false) {
            return this.falseWhenNoValue();
        }
        const result = new ValueWhenNoValueValueSource(value, this, 'boolean', 'boolean', this.__optionalType, this.__typeAdapter);
        result.__isBooleanForCondition = this.__isBooleanForCondition;
        return result;
    }
    // String
    toLowerCase() {
        return new SqlOperation0ValueSource('_toLowerCase', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated use toLowerCase method instead */
    lower() {
        return new SqlOperation0ValueSource('_toLowerCase', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    toUpperCase() {
        return new SqlOperation0ValueSource('_toUpperCase', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated use toUpperCase method instead */
    upper() {
        return new SqlOperation0ValueSource('_toUpperCase', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    length() {
        return new SqlOperation0ValueSource('_length', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    trim() {
        return new SqlOperation0ValueSource('_trim', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    trimLeft() {
        return new SqlOperation0ValueSource('_trimLeft', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated use trimLeft method instead */
    ltrim() {
        return new SqlOperation0ValueSource('_trimLeft', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    trimRight() {
        return new SqlOperation0ValueSource('_trimRight', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated use trimRight method instead */
    rtrim() {
        return new SqlOperation0ValueSource('_trimRight', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    reverse() {
        return new SqlOperation0ValueSource('_reverse', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    // Number functions
    asDouble() {
        return new SqlOperation0ValueSource('_asDouble', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated 'stringDouble' type is deprecated, define your customInt instead */
    asStringDouble() {
        return new SqlOperation0ValueSource('_asDouble', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
    }
    asInt() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
        }
        return new NoopValueSource(this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    /** @deprecated 'stringInt' type is deprecated, define your customInt instead */
    asStringInt() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        return new NoopValueSource(this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
    }
    asBigint() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
        }
        return new NoopValueSource(this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
    }
    abs() {
        return new SqlOperation0ValueSource('_abs', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
    ceil() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_ceil', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_ceil', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_ceil', this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customInt' || this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_ceil', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_ceil', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
        }
    }
    floor() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_floor', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_floor', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_floor', this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customInt' || this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_floor', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_floor', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
        }
    }
    round() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_round', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_round', this, 'stringInt', 'stringInt', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_round', this, 'bigint', 'bigint', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customInt' || this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_round', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_round', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
        }
    }
    exp() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_exp', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_exp', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_exp', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    ln() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_ln', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_ln', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_ln', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_ln', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    log10() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_log10', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_log10', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_log10', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_log10', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    sqrt() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_sqrt', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_sqrt', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_sqrt', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_sqrt', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    cbrt() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cbrt', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cbrt', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_cbrt', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cbrt', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    sign() {
        return new SqlOperation0ValueSource('_sign', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    // Trigonometric Functions
    acos() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_acos', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_acos', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_acos', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_acos', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    asin() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_asin', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_asin', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_asin', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_asin', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    atan() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_atan', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_atan', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_atan', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_atan', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    cos() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cos', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cos', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_cos', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cos', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    cot() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cot', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cot', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_cot', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cot', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    sin() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_sin', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_sin', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_sin', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_sin', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    tan() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_tan', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_tan', this, 'stringDouble', 'stringDouble', this.__optionalType, this.__typeAdapter);
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation0ValueSource('_tan', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_tan', this, 'double', 'double', this.__optionalType, this.__typeAdapter);
        }
    }
    // Date & Time Functions
    getDate() {
        return new SqlOperation0ValueSource('_getDate', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getTime() {
        return new SqlOperation0ValueSource('_getTime', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getFullYear() {
        return new SqlOperation0ValueSource('_getFullYear', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getMonth() {
        return new SqlOperation0ValueSource('_getMonth', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getDay() {
        return new SqlOperation0ValueSource('_getDay', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getHours() {
        return new SqlOperation0ValueSource('_getHours', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getMinutes() {
        return new SqlOperation0ValueSource('_getMinutes', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getSeconds() {
        return new SqlOperation0ValueSource('_getSeconds', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    getMilliseconds() {
        return new SqlOperation0ValueSource('_getMilliseconds', this, 'int', 'int', this.__optionalType, this.__typeAdapter);
    }
    // SqlFunction1
    valueWhenNull(value) {
        return new SqlOperationValueWhenNullValueSource(this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
    }
    nullIfValue(value) {
        return new SqlOperation1ValueSource('_nullIfValue', this, value, this.__valueType, this.__valueTypeName, 'optional', getTypeAdapter2(this, value));
    }
    and(value) {
        return condition(new SqlOperation1ValueSource('_and', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    or(value) {
        return condition(new SqlOperation1ValueSource('_or', this, value, 'boolean', 'boolean', getOptionalType2(this, value), getTypeAdapter2(this, value)));
    }
    // Trigonometric Functions
    atan2(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_atan2', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_atan2', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation1ValueSource('_atan2', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_atan2', this, value, 'double', 'double', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
    }
    // String Functions
    concat(value) {
        return new SqlOperation1ValueSource('_concat', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
    }
    concatIfValue(value) {
        return new SqlOperation1ValueSourceIfValueOrIgnore('_concat', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
    }
    substrToEnd(start) {
        return new SqlOperation1ValueSource('_substrToEnd', this, start, this.__valueType, this.__valueTypeName, getOptionalType2(this, start), getTypeAdapter2(this, start));
    }
    substringToEnd(start) {
        return new SqlOperation1ValueSource('_substringToEnd', this, start, this.__valueType, this.__valueTypeName, getOptionalType2(this, start), getTypeAdapter2(this, start));
    }
    // Number
    power(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_power', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_power', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation1ValueSource('_power', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_power', this, value, 'double', 'double', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
    }
    logn(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_logn', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_logn', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation1ValueSource('_logn', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_logn', this, value, 'double', 'double', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
    }
    roundn(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_roundn', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_roundn', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation1ValueSource('_roundn', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_roundn', this, value, 'double', 'double', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
    }
    /**
     * This function establish a minimum value for the current value, that means the biggest value must be returned
     */
    minValue(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_maximumBetweenTwoValues');
    }
    /**
     * This function establish a maximun value for the current value, that means the smallest value must be returned
     */
    maxValue(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_minimumBetweenTwoValues');
    }
    // Number operators
    add(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_add');
    }
    substract(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_substract');
    }
    multiply(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_multiply');
    }
    divide(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_divide', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_divide', this, value, 'stringDouble', 'stringDouble', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'customDouble') {
            return new SqlOperation1ValueSource('_divide', this, value, this.__valueType, this.__valueTypeName, getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_divide', this, value, 'double', 'double', getOptionalType2(this, value), getTypeAdapter2(this, value));
        }
    }
    modulo(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_modulo');
    }
    /** @deprecated use modulo method instead */
    mod(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_modulo');
    }
    // SqlFunction2
    substr(start, count) {
        return new SqlOperation2ValueSource('_substr', this, start, count, this.__valueType, this.__valueTypeName, getOptionalType3(this, start, count), getTypeAdapter3(this, start, count));
    }
    substring(start, end) {
        return new SqlOperation2ValueSource('_substring', this, start, end, this.__valueType, this.__valueTypeName, getOptionalType3(this, start, end), getTypeAdapter3(this, start, end));
    }
    /** @deprecated use replaceAllIfValue method instead */
    replaceIfValue(findString, replaceWith) {
        return new SqlOperation2ValueSourceIfValueOrIgnore('_replaceAll', this, findString, replaceWith, this.__valueType, this.__valueTypeName, getOptionalType3(this, findString, replaceWith), getTypeAdapter3(this, findString, replaceWith));
    }
    /** @deprecated use replaceAll method instead */
    replace(findString, replaceWith) {
        return new SqlOperation2ValueSource('_replaceAll', this, findString, replaceWith, this.__valueType, this.__valueTypeName, getOptionalType3(this, findString, replaceWith), getTypeAdapter3(this, findString, replaceWith));
    }
    replaceAllIfValue(findString, replaceWith) {
        return new SqlOperation2ValueSourceIfValueOrIgnore('_replaceAll', this, findString, replaceWith, this.__valueType, this.__valueTypeName, getOptionalType3(this, findString, replaceWith), getTypeAdapter3(this, findString, replaceWith));
    }
    replaceAll(findString, replaceWith) {
        return new SqlOperation2ValueSource('_replaceAll', this, findString, replaceWith, this.__valueType, this.__valueTypeName, getOptionalType3(this, findString, replaceWith), getTypeAdapter3(this, findString, replaceWith));
    }
    // Oracle recursive
    __prior() {
        return new SqlOperation0ValueSource('_prior', this, this.__valueType, this.__valueTypeName, this.__optionalType, this.__typeAdapter);
    }
}
exports.ValueSourceImpl = ValueSourceImpl;
_a = symbols_1.isValueSourceObject;
class SqlOperationStatic0ValueSource extends ValueSourceImpl {
    constructor(operation, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
}
exports.SqlOperationStatic0ValueSource = SqlOperationStatic0ValueSource;
class SqlOperationStaticBooleanValueSource extends ValueSourceImpl {
    constructor(operation) {
        super('boolean', 'boolean', 'required', undefined);
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        if (this.__operation === '_true') {
            return sqlBuilder._trueForCondition(params);
        }
        else {
            return sqlBuilder._falseForCondition(params);
        }
    }
}
exports.SqlOperationStaticBooleanValueSource = SqlOperationStaticBooleanValueSource;
class BooleanValueWhenNoValueValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        const sql = this.__valueSource.__toSql(sqlBuilder, params);
        if (sql) {
            return sql;
        }
        // No value
        return sqlBuilder[this.__operation](params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        const sql = this.__valueSource.__toSql(sqlBuilder, params);
        if (sql) {
            return sql;
        }
        // No value
        if (this.__operation === '_true') {
            return sqlBuilder._trueForCondition(params);
        }
        else {
            return sqlBuilder._falseForCondition(params);
        }
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder);
    }
}
exports.BooleanValueWhenNoValueValueSource = BooleanValueWhenNoValueValueSource;
class ValueWhenNoValueValueSource extends ValueSourceImpl {
    constructor(valueWhenNoValue, valueSource, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__valueWhenNoValue = valueWhenNoValue;
    }
    __toSql(sqlBuilder, params) {
        const sql = this.__valueSource.__toSql(sqlBuilder, params);
        if (sql) {
            return sql;
        }
        // No value
        return this.__valueWhenNoValue.__toSql(sqlBuilder, params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        const sql = this.__valueSource.__toSql(sqlBuilder, params);
        if (sql) {
            return sql;
        }
        // No value
        return this.__valueWhenNoValue.__toSqlForCondition(sqlBuilder, params);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        this.__valueWhenNoValue.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        this.__valueWhenNoValue.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        this.__valueWhenNoValue.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || this.__valueWhenNoValue.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || this.__valueWhenNoValue.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && this.__valueWhenNoValue.__isAllowed(sqlBuilder);
    }
}
exports.ValueWhenNoValueValueSource = ValueWhenNoValueValueSource;
class SqlOperationStatic1ValueSource extends ValueSourceImpl {
    constructor(operation, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__value, this.__valueType, this.__valueTypeName, this.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperationStatic1ValueSource = SqlOperationStatic1ValueSource;
class SqlOperationConstValueSource extends ValueSourceImpl {
    constructor(value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = '_const';
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._const(params, this.__value, this.__valueType, this.__valueTypeName, this.__typeAdapter);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return sqlBuilder._constForCondition(params, this.__value, this.__valueType, this.__valueTypeName, this.__typeAdapter);
    }
    isConstValue() {
        return true;
    }
    getConstValue() {
        return this.__value;
    }
    __addWiths(sqlBuilder, withs) {
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperationConstValueSource = SqlOperationConstValueSource;
class SqlOperation0ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder);
    }
}
exports.SqlOperation0ValueSource = SqlOperation0ValueSource;
class SqlOperationIsNullValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder);
    }
}
exports.SqlOperationIsNullValueSource = SqlOperationIsNullValueSource;
class SqlOperation1ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperation1ValueSource = SqlOperation1ValueSource;
class SqlOperationInValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_2.__addWiths)(values[i], sqlBuilder, withs);
            }
        }
        else {
            if (isSelectQuery(values)) {
                __addInlineQueryWiths(sqlBuilder, withs, values);
            }
            else {
                (0, ITableOrView_2.__addWiths)(values, sqlBuilder, withs);
            }
        }
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_1.__registerTableOrView)(values[i], sqlBuilder, requiredTablesOrViews);
            }
        }
        else {
            (0, ITableOrView_1.__registerTableOrView)(values, sqlBuilder, requiredTablesOrViews);
        }
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_1.__registerRequiredColumn)(values[i], sqlBuilder, requiredColumns, onlyForTablesOrViews);
            }
        }
        else {
            (0, ITableOrView_1.__registerRequiredColumn)(values, sqlBuilder, requiredColumns, onlyForTablesOrViews);
        }
    }
    __getOldValues(sqlBuilder) {
        let result = this.__valueSource.__getOldValues(sqlBuilder);
        if (result) {
            return result;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__getOldValues)(values[i], sqlBuilder);
                if (result) {
                    return result;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__getOldValues)(values, sqlBuilder);
        }
        return undefined;
    }
    __getValuesForInsert(sqlBuilder) {
        let result = this.__valueSource.__getValuesForInsert(sqlBuilder);
        if (result) {
            return result;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__getValuesForInsert)(values[i], sqlBuilder);
                if (result) {
                    return result;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__getValuesForInsert)(values, sqlBuilder);
        }
        return undefined;
    }
    __isAllowed(sqlBuilder) {
        let result = this.__valueSource.__isAllowed(sqlBuilder);
        if (!result) {
            return false;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__isAllowed)(values[i], sqlBuilder);
                if (!result) {
                    return false;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__isAllowed)(values, sqlBuilder);
        }
        return true;
    }
}
exports.SqlOperationInValueSource = SqlOperationInValueSource;
class SqlOperationValueWhenNullValueSource extends ValueSourceImpl {
    constructor(valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = '_valueWhenNull';
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperationValueWhenNullValueSource = SqlOperationValueWhenNullValueSource;
class SqlOperation1NotOptionalValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperation1NotOptionalValueSource = SqlOperation1NotOptionalValueSource;
class SqlOperation1ValueSourceIfValueOrNoop extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return '';
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return undefined;
        }
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return undefined;
        }
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return true;
        }
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperation1ValueSourceIfValueOrNoop = SqlOperation1ValueSourceIfValueOrNoop;
class SqlOperationInValueSourceIfValueOrNoop extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return '';
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__addWiths(sqlBuilder, withs);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_2.__addWiths)(values[i], sqlBuilder, withs);
            }
        }
        else {
            (0, ITableOrView_2.__addWiths)(values, sqlBuilder, withs);
        }
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_1.__registerTableOrView)(values[i], sqlBuilder, requiredTablesOrViews);
            }
        }
        else {
            (0, ITableOrView_1.__registerTableOrView)(values, sqlBuilder, requiredTablesOrViews);
        }
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        if (!sqlBuilder._isValue(this.__value)) {
            return;
        }
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                (0, ITableOrView_1.__registerRequiredColumn)(values[i], sqlBuilder, requiredColumns, onlyForTablesOrViews);
            }
        }
        else {
            (0, ITableOrView_1.__registerRequiredColumn)(values, sqlBuilder, requiredColumns, onlyForTablesOrViews);
        }
    }
    __getOldValues(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return undefined;
        }
        let result = this.__valueSource.__getOldValues(sqlBuilder);
        if (result) {
            return result;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__getOldValues)(values[i], sqlBuilder);
                if (result) {
                    return result;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__getOldValues)(values, sqlBuilder);
        }
        return undefined;
    }
    __getValuesForInsert(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return undefined;
        }
        let result = this.__valueSource.__getValuesForInsert(sqlBuilder);
        if (result) {
            return result;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__getValuesForInsert)(values[i], sqlBuilder);
                if (result) {
                    return result;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__getValuesForInsert)(values, sqlBuilder);
        }
        return undefined;
    }
    __isAllowed(sqlBuilder) {
        if (!sqlBuilder._isValue(this.__value)) {
            return true;
        }
        let result = this.__valueSource.__isAllowed(sqlBuilder);
        if (!result) {
            return false;
        }
        const values = this.__value;
        if (Array.isArray(values)) {
            for (let i = 0, length = values.length; i < length; i++) {
                result = (0, ITableOrView_1.__isAllowed)(values[i], sqlBuilder);
                if (!result) {
                    return false;
                }
            }
        }
        else {
            return (0, ITableOrView_1.__isAllowed)(values, sqlBuilder);
        }
        return true;
    }
}
exports.SqlOperationInValueSourceIfValueOrNoop = SqlOperationInValueSourceIfValueOrNoop;
class SqlOperationValueSourceIfValueAlwaysNoop extends ValueSourceImpl {
    constructor() {
        super('', '', 'required', undefined);
    }
    __toSql(_sqlBuilder, _params) {
        return '';
    }
}
exports.SqlOperationValueSourceIfValueAlwaysNoop = SqlOperationValueSourceIfValueAlwaysNoop;
class SqlOperation1ValueSourceIfValueOrIgnore extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.SqlOperation1ValueSourceIfValueOrIgnore = SqlOperation1ValueSourceIfValueOrIgnore;
class SqlOperation2ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, value2, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
        this.__value2 = value2;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__value2, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value2, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value2, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value2, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value2, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value2, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value2, sqlBuilder);
    }
}
exports.SqlOperation2ValueSource = SqlOperation2ValueSource;
class SqlOperation2ValueSourceIfValueOrIgnore extends ValueSourceImpl {
    constructor(operation, valueSource, value, value2, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
        this.__value2 = value2;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        if (!sqlBuilder._isValue(this.__value2)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__value2, this.__valueSource.__valueType, this.__valueSource.__valueTypeName, this.__valueSource.__typeAdapter);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
        (0, ITableOrView_2.__addWiths)(this.__value2, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
        (0, ITableOrView_1.__registerTableOrView)(this.__value2, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value2, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder) || (0, ITableOrView_1.__getOldValues)(this.__value2, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder) || (0, ITableOrView_1.__getValuesForInsert)(this.__value2, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder) && (0, ITableOrView_1.__isAllowed)(this.__value2, sqlBuilder);
    }
}
exports.SqlOperation2ValueSourceIfValueOrIgnore = SqlOperation2ValueSourceIfValueOrIgnore;
class NoopValueSource extends ValueSourceImpl {
    constructor(valueSource, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__valueSource = valueSource;
    }
    __toSql(sqlBuilder, params) {
        return this.__valueSource.__toSql(sqlBuilder, params);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__valueSource.__isAllowed(sqlBuilder);
    }
}
exports.NoopValueSource = NoopValueSource;
class SequenceValueSource extends ValueSourceImpl {
    constructor(operation, sequenceName, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
        this.__sequenceName = sequenceName;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__sequenceName);
    }
}
exports.SequenceValueSource = SequenceValueSource;
class FragmentValueSource extends ValueSourceImpl {
    constructor(sql, sqlParams, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = '_fragment'; // Needed to detect if parenthesis is required
        this.__sql = sql;
        this.__sqlParams = sqlParams;
        if (valueTypeName === 'boolean') {
            this.__isBooleanForCondition = true;
        }
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._fragment(params, this.__sql, this.__sqlParams);
    }
    __addWiths(sqlBuilder, withs) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            value.__addWiths(sqlBuilder, withs);
        }
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            value.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        }
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            value.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        }
    }
    __getOldValues(sqlBuilder) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            const result = value.__getOldValues(sqlBuilder);
            if (result) {
                return result;
            }
        }
        return undefined;
    }
    __getValuesForInsert(sqlBuilder) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            const result = value.__getValuesForInsert(sqlBuilder);
            if (result) {
                return result;
            }
        }
        return undefined;
    }
    __isAllowed(sqlBuilder) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = (0, values_2.__getValueSourcePrivate)(sqlParams[i]);
            const result = value.__getValuesForInsert(sqlBuilder);
            if (!result) {
                return false;
            }
        }
        return true;
    }
}
exports.FragmentValueSource = FragmentValueSource;
class ValueSourceFromBuilder extends ValueSourceImpl {
    constructor(builder, fragmentBuilder, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__builder = builder;
        this.__fragmentBuilder = fragmentBuilder;
        if (valueTypeName === 'boolean') {
            this.__isBooleanForCondition = true;
        }
    }
    __getBuilderOutput() {
        if (!this.__builderOutput) {
            this.__builderOutput = this.__builder(this.__fragmentBuilder);
        }
        return this.__builderOutput;
    }
    __getBuilderOutputPrivate() {
        return (0, values_2.__getValueSourcePrivate)(this.__getBuilderOutput());
    }
    __toSql(sqlBuilder, params) {
        const builderOutput = this.__getBuilderOutput();
        if (!(0, SqlBuilder_1.hasToSql)(builderOutput)) {
            throw new Error('The result of value from fragment functions is no a valid sql element');
        }
        return builderOutput.__toSql(sqlBuilder, params);
    }
    __addWiths(sqlBuilder, withs) {
        this.__getBuilderOutputPrivate().__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__getBuilderOutputPrivate().__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__getBuilderOutputPrivate().__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__getBuilderOutputPrivate().__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__getBuilderOutputPrivate().__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__getBuilderOutputPrivate().__isAllowed(sqlBuilder);
    }
}
exports.ValueSourceFromBuilder = ValueSourceFromBuilder;
class AllowWhenValueSource extends ValueSourceImpl {
    constructor(allowed, error, valueSource) {
        super(valueSource.__valueType, valueSource.__valueTypeName, valueSource.__optionalType, valueSource.__typeAdapter);
        this.__valueSource = valueSource;
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return this.__valueSource.__toSql(sqlBuilder, params);
    }
    __addWiths(sqlBuilder, withs) {
        this.__valueSource.__addWiths(sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__valueSource.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__valueSource.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__valueSource.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__valueSource.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return this.__valueSource.__isAllowed(sqlBuilder);
    }
}
exports.AllowWhenValueSource = AllowWhenValueSource;
class AggregateFunctions0ValueSource extends ValueSourceImpl {
    constructor(operation, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
}
exports.AggregateFunctions0ValueSource = AggregateFunctions0ValueSource;
class NullValueSource extends ValueSourceImpl {
    constructor(valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = '_asNullValue';
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._asNullValue(params, this.__valueType, this.__valueTypeName, this.__typeAdapter);
    }
    __isAllowed(_sqlBuilder) {
        return false;
    }
}
exports.NullValueSource = NullValueSource;
class AggregateFunctions1ValueSource extends ValueSourceImpl {
    constructor(operation, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__value);
    }
    __addWiths(sqlBuilder, withs) {
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.AggregateFunctions1ValueSource = AggregateFunctions1ValueSource;
class AggregateFunctions1or2ValueSource extends ValueSourceImpl {
    constructor(operation, separator, value, valueType, valueTypeName, optionalType, typeAdapter) {
        super(valueType, valueTypeName, optionalType, typeAdapter);
        this.__operation = operation;
        this.__separator = separator;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__separator, this.__value);
    }
    __addWiths(sqlBuilder, withs) {
        (0, ITableOrView_2.__addWiths)(this.__value, sqlBuilder, withs);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        (0, ITableOrView_1.__registerTableOrView)(this.__value, sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__value, sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return (0, ITableOrView_1.__getOldValues)(this.__value, sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return (0, ITableOrView_1.__getValuesForInsert)(this.__value, sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return (0, ITableOrView_1.__isAllowed)(this.__value, sqlBuilder);
    }
}
exports.AggregateFunctions1or2ValueSource = AggregateFunctions1or2ValueSource;
function mergeOptional(op1, op2) {
    if (op1 === 'required') {
        return op2;
    }
    else if (op1 === 'requiredInOptionalObject') {
        if (op2 === 'required') {
            return 'requiredInOptionalObject';
        }
        else {
            return op2;
        }
    }
    else if (op1 === 'originallyRequired') {
        if (op2 === 'required') {
            return 'originallyRequired';
        }
        else {
            return op2;
        }
    }
    else {
        return 'optional';
    }
}
function getOptionalType2(a, b) {
    if ((0, values_1.isValueSource)(b)) {
        return mergeOptional(a.__optionalType, (0, values_2.__getValueSourcePrivate)(b).__optionalType);
    }
    return a.__optionalType;
}
function getOptionalType3(a, b, c) {
    let result = a.__optionalType;
    if ((0, values_1.isValueSource)(b)) {
        const bPrivate = (0, values_2.__getValueSourcePrivate)(b);
        if (bPrivate.__typeAdapter) {
            result = mergeOptional(result, bPrivate.__optionalType);
        }
    }
    if ((0, values_1.isValueSource)(c)) {
        result = mergeOptional(result, (0, values_2.__getValueSourcePrivate)(c).__optionalType);
    }
    return result;
}
function getTypeAdapter2(a, b) {
    if (a.__typeAdapter) {
        return a.__typeAdapter;
    }
    if ((0, values_1.isValueSource)(b)) {
        return (0, values_2.__getValueSourcePrivate)(b).__typeAdapter;
    }
    return undefined;
}
function getTypeAdapter3(a, b, c) {
    if (a.__typeAdapter) {
        return a.__typeAdapter;
    }
    if ((0, values_1.isValueSource)(b)) {
        const bPrivate = (0, values_2.__getValueSourcePrivate)(b);
        if (bPrivate.__typeAdapter) {
            return bPrivate.__typeAdapter;
        }
    }
    if ((0, values_1.isValueSource)(c)) {
        return (0, values_2.__getValueSourcePrivate)(c).__typeAdapter;
    }
    return undefined;
}
function createSqlOperation1ofOverloadedNumber(thiz, value, operation) {
    if (thiz.__valueType === 'double' || thiz.__valueType === 'stringDouble' || thiz.__valueType === 'bigint' || thiz.__valueType === 'customInt' || thiz.__valueType === 'customDouble') {
        return new SqlOperation1ValueSource(operation, thiz, value, thiz.__valueType, thiz.__valueTypeName, getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
    }
    if (thiz.__valueType === 'stringInt') {
        if ((0, values_1.isValueSource)(value)) {
            const valuePrivate = (0, values_2.__getValueSourcePrivate)(value);
            if (valuePrivate.__valueType === 'int' || valuePrivate.__valueType === 'stringInt') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', 'stringInt', getOptionalType2(thiz, value), thiz.__typeAdapter);
            }
            else {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', 'stringDouble', getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
            }
        }
        if (Number.isInteger(value)) {
            return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', 'stringInt', getOptionalType2(thiz, value), thiz.__typeAdapter);
        }
        else {
            return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', 'stringDouble', getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
        }
    }
    else {
        if ((0, values_1.isValueSource)(value)) {
            const valuePrivate = (0, values_2.__getValueSourcePrivate)(value);
            if (valuePrivate.__valueType === 'int') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'int', 'int', getOptionalType2(thiz, value), thiz.__typeAdapter);
            }
            else if (valuePrivate.__valueType === 'stringInt') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', 'stringInt', getOptionalType2(thiz, value), thiz.__typeAdapter);
            }
            else if (valuePrivate.__valueType === 'stringDouble') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', 'stringDouble', getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
            }
            else {
                return new SqlOperation1ValueSource(operation, thiz, value, 'double', 'double', getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
            }
        }
        if (Number.isInteger(value)) {
            return new SqlOperation1ValueSource(operation, thiz, value, 'int', 'int', getOptionalType2(thiz, value), thiz.__typeAdapter);
        }
        else {
            return new SqlOperation1ValueSource(operation, thiz, value, 'double', 'double', getOptionalType2(thiz, value), getTypeAdapter2(thiz, value));
        }
    }
}
function condition(valueSource) {
    valueSource.__isBooleanForCondition = true;
    return valueSource;
}
class TableOrViewRawFragmentValueSource {
    constructor(_tableOrView, operation) {
        this[_b] = true;
        this.__valueType = '';
        this.__valueTypeName = '';
        this.__optionalType = 'required';
        this.__tableOrView = _tableOrView;
        this.__operation = operation;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenTableOrViewRawFragmentValueSource(when, new Error(error), this.__tableOrView, this.__operation);
        }
        else {
            return new AllowWhenTableOrViewRawFragmentValueSource(when, error, this.__tableOrView, this.__operation);
        }
    }
    disallowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenTableOrViewRawFragmentValueSource(!when, new Error(error), this.__tableOrView, this.__operation);
        }
        else {
            return new AllowWhenTableOrViewRawFragmentValueSource(!when, error, this.__tableOrView, this.__operation);
        }
    }
    __addWiths(_sqlBuilder, _withs) {
        // Do nothing
    }
    __registerTableOrView(_sqlBuilder, _requiredTablesOrViews) {
        // Do nothing
    }
    __registerRequiredColumn(_sqlBuilder, _requiredColumns, _onlyForTablesOrViews) {
        // Do nothing
    }
    __getOldValues(_sqlBuilder) {
        return undefined;
    }
    __getValuesForInsert(_sqlBuilder) {
        return undefined;
    }
    __isAllowed(_sqlBuilder) {
        return true;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__tableOrView);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
}
exports.TableOrViewRawFragmentValueSource = TableOrViewRawFragmentValueSource;
_b = symbols_1.isValueSourceObject;
class AllowWhenTableOrViewRawFragmentValueSource extends TableOrViewRawFragmentValueSource {
    constructor(allowed, error, _tableOrView, operation) {
        super(_tableOrView, operation);
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return super.__toSql(sqlBuilder, params);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return super.__isAllowed(sqlBuilder);
    }
}
exports.AllowWhenTableOrViewRawFragmentValueSource = AllowWhenTableOrViewRawFragmentValueSource;
class InlineSelectValueSource extends ValueSourceImpl {
    constructor(selectData, required) {
        super(...valueSourceInitializationForInlineSelect(selectData, required));
        this.__operation = '_inlineSelectAsValue';
        this.__selectData = selectData;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._inlineSelectAsValue(this.__selectData, params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return sqlBuilder._inlineSelectAsValueForCondition(this.__selectData, params);
    }
    __addWiths(sqlBuilder, withs) {
        __addInlineQueryWiths(sqlBuilder, withs, this.__selectData);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__selectData.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__selectData.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__selectData.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__selectData.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__selectData.__isAllowed(sqlBuilder);
    }
}
exports.InlineSelectValueSource = InlineSelectValueSource;
class AggregateSelectValueSource {
    constructor(selectData, aggregatedArrayColumns, aggregatedArrayMode, _optionalType) {
        this[_c] = true;
        this.__valueType = 'aggregatedArray';
        this.__valueTypeName = 'aggregatedArray';
        this.__operation = '_inlineSelectAsValue';
        this.__selectData = selectData;
        this.__aggregatedArrayColumns = aggregatedArrayColumns;
        this.__aggregatedArrayMode = aggregatedArrayMode;
        this.__optionalType = _optionalType;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenAggregateSelectValueSource(when, new Error(error), this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
        else {
            return new AllowWhenAggregateSelectValueSource(when, error, this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
    }
    disallowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenAggregateSelectValueSource(!when, new Error(error), this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
        else {
            return new AllowWhenAggregateSelectValueSource(!when, error, this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._inlineSelectAsValue(this.__selectData, params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return sqlBuilder._inlineSelectAsValueForCondition(this.__selectData, params);
    }
    __addWiths(sqlBuilder, withs) {
        __addInlineQueryWiths(sqlBuilder, withs, this.__selectData);
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__selectData.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__selectData.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues(sqlBuilder) {
        return this.__selectData.__getOldValues(sqlBuilder);
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__selectData.__getValuesForInsert(sqlBuilder);
    }
    __isAllowed(sqlBuilder) {
        return this.__selectData.__isAllowed(sqlBuilder);
    }
    useEmptyArrayForNoValue() {
        return new AggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'required');
    }
    asOptionalNonEmptyArray() {
        return new AggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
    }
    asRequiredInOptionalObject() {
        return new AggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'requiredInOptionalObject');
    }
    onlyWhenOrNull(when) {
        if (when) {
            return this;
        }
        else {
            return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
        }
    }
    ignoreWhenAsNull(when) {
        if (when) {
            return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
        }
        else {
            return this;
        }
    }
    projectingOptionalValuesAsNullable() {
        this.__aggreagtedProjectingOptionalValuesAsNullable = true;
        return this;
    }
}
exports.AggregateSelectValueSource = AggregateSelectValueSource;
_c = symbols_1.isValueSourceObject;
class AllowWhenAggregateSelectValueSource extends AggregateSelectValueSource {
    constructor(allowed, error, selectData, aggregatedArrayColumns, aggregatedArrayMode, _optionalType) {
        super(selectData, aggregatedArrayColumns, aggregatedArrayMode, _optionalType);
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return super.__toSql(sqlBuilder, params);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return super.__isAllowed(sqlBuilder);
    }
}
exports.AllowWhenAggregateSelectValueSource = AllowWhenAggregateSelectValueSource;
class NullAggregateSelectValueSource {
    constructor(selectData, aggregatedArrayColumns, aggregatedArrayMode, _optionalType) {
        this[_d] = true;
        this.__valueType = 'aggregatedArray';
        this.__valueTypeName = 'aggregatedArray';
        this.__operation = '_inlineSelectAsValue';
        this.__selectData = selectData;
        this.__aggregatedArrayColumns = aggregatedArrayColumns;
        this.__aggregatedArrayMode = aggregatedArrayMode;
        this.__optionalType = _optionalType;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        if (typeof error === 'string') {
            return new NullAllowWhenAggregateSelectValueSource(this.__selectData, when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
        else {
            return new NullAllowWhenAggregateSelectValueSource(this.__selectData, when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
    }
    disallowWhen(when, error) {
        if (typeof error === 'string') {
            return new NullAllowWhenAggregateSelectValueSource(this.__selectData, !when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
        else {
            return new NullAllowWhenAggregateSelectValueSource(this.__selectData, !when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType);
        }
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._asNullValue(params, this.__valueType, this.__valueTypeName, undefined);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    __addWiths(_sqlBuilder, _withs) {
    }
    __registerTableOrView(_sqlBuilder, _requiredTablesOrViews) {
    }
    __registerRequiredColumn(_sqlBuilder, _requiredColumns, _onlyForTablesOrViews) {
    }
    __getOldValues(_sqlBuilder) {
        return undefined;
    }
    __getValuesForInsert(_sqlBuilder) {
        return undefined;
    }
    __isAllowed(_sqlBuilder) {
        return false;
    }
    useEmptyArrayForNoValue() {
        return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'required');
    }
    asOptionalNonEmptyArray() {
        return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
    }
    asRequiredInOptionalObject() {
        return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'requiredInOptionalObject');
    }
    onlyWhenOrNull(when) {
        if (when) {
            return this;
        }
        else {
            return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
        }
    }
    ignoreWhenAsNull(when) {
        if (when) {
            return new NullAggregateSelectValueSource(this.__selectData, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional');
        }
        else {
            return this;
        }
    }
    projectingOptionalValuesAsNullable() {
        return this;
    }
}
exports.NullAggregateSelectValueSource = NullAggregateSelectValueSource;
_d = symbols_1.isValueSourceObject;
class NullAllowWhenAggregateSelectValueSource extends NullAggregateSelectValueSource {
    constructor(selectData, allowed, error, aggregatedArrayColumns, aggregatedArrayMode, _optionalType) {
        super(selectData, aggregatedArrayColumns, aggregatedArrayMode, _optionalType);
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return super.__toSql(sqlBuilder, params);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return super.__isAllowed(sqlBuilder);
    }
}
exports.NullAllowWhenAggregateSelectValueSource = NullAllowWhenAggregateSelectValueSource;
function __addInlineQueryWiths(sqlBuilder, withs, selectData) {
    const withViews = [];
    const subSelectUsing = selectData.__subSelectUsing || [];
    selectData.__addWiths(sqlBuilder, withViews);
    for (let i = 0, length = withViews.length; i < length; i++) {
        const withView = withViews[i];
        if (subSelectUsing.includes(withView)) {
            continue;
        }
        if (withs.includes(withView)) {
            continue;
        }
        const withViewPrivate = (0, ITableOrView_1.__getTableOrViewPrivate)(withView);
        if (withViewPrivate.__hasExternalDependencies) {
            continue;
        }
        withViewPrivate.__addWiths(sqlBuilder, withs);
    }
}
function isSelectQuery(value) {
    if (value === undefined || value === null) {
        return false;
    }
    if (typeof value === 'object') {
        return !!value[symbols_1.isSelectQueryObject];
    }
    return false;
}
function valueSourceInitializationForInlineSelect(selectData, required) {
    if (selectData.__asInlineAggregatedArrayValue) {
        throw new Error('Ilegal state: unexpected inline aggregated array vaule');
    }
    else if (selectData.__oneColumn) {
        const result = selectData.__columns['result'];
        if (!(0, values_1.isValueSource)(result)) {
            throw new Error('Illegal state: result column for a select one column not found');
        }
        const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(result);
        let typeAdapter = valueSourcePrivate.__typeAdapter;
        if (typeAdapter instanceof TypeAdapter_1.CustomBooleanTypeAdapter) {
            // Avoid treat the column as a custom boolean
            typeAdapter = new ProxyTypeAdapter_1.ProxyTypeAdapter(typeAdapter);
        }
        return [valueSourcePrivate.__valueType, valueSourcePrivate.__valueTypeName, required ? 'required' : 'optional', typeAdapter, valueSourcePrivate.__aggregatedArrayColumns, valueSourcePrivate.__aggregatedArrayMode, valueSourcePrivate.__uuidString];
    }
    else {
        throw new Error('Illega state: unexpected inline select');
    }
}
class AggregateValueAsArrayValueSource {
    constructor(aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distict) {
        this[_e] = true;
        this.__valueType = 'aggregatedArray';
        this.__valueTypeName = 'aggregatedArray';
        this.__operation = '_aggregateValueAsArray';
        this.__aggregatedArrayColumns = aggregatedArrayColumns;
        this.__aggregatedArrayMode = aggregatedArrayMode;
        this.__optionalType = _optionalType;
        this.__aggregatedArrayDistinct = distict;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenAggregateValueAsArrayValueSource(when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
        else {
            return new AllowWhenAggregateValueAsArrayValueSource(when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
    }
    disallowWhen(when, error) {
        if (typeof error === 'string') {
            return new AllowWhenAggregateValueAsArrayValueSource(!when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
        else {
            return new AllowWhenAggregateValueAsArrayValueSource(!when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
    }
    __addWiths(sqlBuilder, withs) {
        this.__addWithsOf(sqlBuilder, withs, this.__aggregatedArrayColumns);
    }
    __addWithsOf(sqlBuilder, withs, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            valueSourcePrivate.__addWiths(sqlBuilder, withs);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                this.__addWithsOf(sqlBuilder, withs, aggregatedArrayColumns[prop]);
            }
        }
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        this.__registerTableOrViewOf(sqlBuilder, requiredTablesOrViews, this.__aggregatedArrayColumns);
    }
    __registerTableOrViewOf(sqlBuilder, requiredTablesOrViews, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            valueSourcePrivate.__registerTableOrView(sqlBuilder, requiredTablesOrViews);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                this.__registerTableOrViewOf(sqlBuilder, requiredTablesOrViews, aggregatedArrayColumns[prop]);
            }
        }
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        this.__registerRequiredColumnOf(sqlBuilder, requiredColumns, onlyForTablesOrViews, this.__aggregatedArrayColumns);
    }
    __registerRequiredColumnOf(sqlBuilder, requiredColumns, onlyForTablesOrViews, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            valueSourcePrivate.__registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                this.__registerRequiredColumnOf(sqlBuilder, requiredColumns, onlyForTablesOrViews, aggregatedArrayColumns[prop]);
            }
        }
    }
    __getOldValues(sqlBuilder) {
        return this.__getOldValuesOf(sqlBuilder, this.__aggregatedArrayColumns);
    }
    __getOldValuesOf(sqlBuilder, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return undefined;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            return valueSourcePrivate.__getOldValues(sqlBuilder);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                const result = this.__getOldValuesOf(sqlBuilder, aggregatedArrayColumns[prop]);
                if (result) {
                    return result;
                }
            }
            return undefined;
        }
    }
    __getValuesForInsert(sqlBuilder) {
        return this.__getValuesForInsertOf(sqlBuilder, this.__aggregatedArrayColumns);
    }
    __getValuesForInsertOf(sqlBuilder, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return undefined;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            return valueSourcePrivate.__getValuesForInsert(sqlBuilder);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                const result = this.__getValuesForInsertOf(sqlBuilder, aggregatedArrayColumns[prop]);
                if (result) {
                    return result;
                }
            }
            return undefined;
        }
    }
    __isAllowed(sqlBuilder) {
        return this.__isAllowedOf(sqlBuilder, this.__aggregatedArrayColumns);
    }
    __isAllowedOf(sqlBuilder, aggregatedArrayColumns) {
        if (!aggregatedArrayColumns) {
            return true;
        }
        else if ((0, values_1.isValueSource)(aggregatedArrayColumns)) {
            const valueSourcePrivate = (0, values_2.__getValueSourcePrivate)(aggregatedArrayColumns);
            return valueSourcePrivate.__isAllowed(sqlBuilder);
        }
        else {
            for (let prop in aggregatedArrayColumns) {
                const result = this.__isAllowedOf(sqlBuilder, aggregatedArrayColumns[prop]);
                if (!result) {
                    return false;
                }
            }
            return true;
        }
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._aggregateValueAsArray(this, params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    useEmptyArrayForNoValue() {
        return new AggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'required', this.__aggregatedArrayDistinct);
    }
    asOptionalNonEmptyArray() {
        return new AggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
    }
    asRequiredInOptionalObject() {
        return new AggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'requiredInOptionalObject', this.__aggregatedArrayDistinct);
    }
    onlyWhenOrNull(when) {
        if (when) {
            return this;
        }
        else {
            return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
        }
    }
    ignoreWhenAsNull(when) {
        if (when) {
            return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
        }
        else {
            return this;
        }
    }
    projectingOptionalValuesAsNullable() {
        this.__aggreagtedProjectingOptionalValuesAsNullable = true;
        return this;
    }
}
exports.AggregateValueAsArrayValueSource = AggregateValueAsArrayValueSource;
_e = symbols_1.isValueSourceObject;
class AllowWhenAggregateValueAsArrayValueSource extends AggregateValueAsArrayValueSource {
    constructor(allowed, error, aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distinct) {
        super(aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distinct);
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return super.__toSql(sqlBuilder, params);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return super.__isAllowed(sqlBuilder);
    }
}
exports.AllowWhenAggregateValueAsArrayValueSource = AllowWhenAggregateValueAsArrayValueSource;
class NullAggregateValueAsArrayValueSource {
    constructor(aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distinct) {
        this[_f] = true;
        this.__valueType = 'aggregatedArray';
        this.__valueTypeName = 'aggregatedArray';
        this.__operation = '_aggregateValueAsArray';
        this.__aggregatedArrayColumns = aggregatedArrayColumns;
        this.__aggregatedArrayMode = aggregatedArrayMode;
        this.__optionalType = _optionalType;
        this.__aggregatedArrayDistinct = distinct;
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    allowWhen(when, error) {
        if (typeof error === 'string') {
            return new NullAllowWhenAggregateValueAsArrayValueSource(when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
        else {
            return new NullAllowWhenAggregateValueAsArrayValueSource(when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
    }
    disallowWhen(when, error) {
        if (typeof error === 'string') {
            return new NullAllowWhenAggregateValueAsArrayValueSource(!when, new Error(error), this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
        else {
            return new NullAllowWhenAggregateValueAsArrayValueSource(!when, error, this.__aggregatedArrayColumns, this.__aggregatedArrayMode, this.__optionalType, this.__aggregatedArrayDistinct);
        }
    }
    __addWiths(_sqlBuilder, _withs) {
    }
    __registerTableOrView(_sqlBuilder, _requiredTablesOrViews) {
    }
    __registerRequiredColumn(_sqlBuilder, _requiredColumns, _onlyForTablesOrViews) {
    }
    __getOldValues(_sqlBuilder) {
        return undefined;
    }
    __getValuesForInsert(_sqlBuilder) {
        return undefined;
    }
    __isAllowed(_sqlBuilder) {
        return false;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._asNullValue(params, this.__valueType, this.__valueTypeName, undefined);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    useEmptyArrayForNoValue() {
        return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'required', this.__aggregatedArrayDistinct);
    }
    asOptionalNonEmptyArray() {
        return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
    }
    asRequiredInOptionalObject() {
        return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'requiredInOptionalObject', this.__aggregatedArrayDistinct);
    }
    onlyWhenOrNull(when) {
        if (when) {
            return this;
        }
        else {
            return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
        }
    }
    ignoreWhenAsNull(when) {
        if (when) {
            return new NullAggregateValueAsArrayValueSource(this.__aggregatedArrayColumns, this.__aggregatedArrayMode, 'optional', this.__aggregatedArrayDistinct);
        }
        else {
            return this;
        }
    }
    projectingOptionalValuesAsNullable() {
        return this;
    }
}
exports.NullAggregateValueAsArrayValueSource = NullAggregateValueAsArrayValueSource;
_f = symbols_1.isValueSourceObject;
class NullAllowWhenAggregateValueAsArrayValueSource extends NullAggregateValueAsArrayValueSource {
    constructor(allowed, error, aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distinct) {
        super(aggregatedArrayColumns, aggregatedArrayMode, _optionalType, distinct);
        this.__error = error;
        this.__allowed = allowed;
    }
    __toSql(sqlBuilder, params) {
        if (!this.__allowed) {
            throw this.__error;
        }
        return super.__toSql(sqlBuilder, params);
    }
    __isAllowed(sqlBuilder) {
        if (!this.__allowed) {
            return false;
        }
        return super.__isAllowed(sqlBuilder);
    }
}
exports.NullAllowWhenAggregateValueAsArrayValueSource = NullAllowWhenAggregateValueAsArrayValueSource;
