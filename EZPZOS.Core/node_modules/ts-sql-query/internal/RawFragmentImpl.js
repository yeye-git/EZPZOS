"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawFragmentImpl = void 0;
const ITableOrView_1 = require("../utils/ITableOrView");
const symbols_1 = require("../utils/symbols");
class RawFragmentImpl {
    constructor(template, params) {
        this.__template = template;
        this.__params = params;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._rawFragment(params, this.__template, this.__params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    __addWiths(sqlBuilder, withs) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            (0, ITableOrView_1.__addWiths)(params[i], sqlBuilder, withs);
        }
    }
    __registerTableOrView(sqlBuilder, requiredTablesOrViews) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            (0, ITableOrView_1.__registerTableOrView)(params[i], sqlBuilder, requiredTablesOrViews);
        }
    }
    __registerRequiredColumn(sqlBuilder, requiredColumns, onlyForTablesOrViews) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            (0, ITableOrView_1.__registerRequiredColumn)(params[i], sqlBuilder, requiredColumns, onlyForTablesOrViews);
        }
    }
    __getOldValues(sqlBuilder) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            const result = (0, ITableOrView_1.__getOldValues)(params[i], sqlBuilder);
            if (result) {
                return result;
            }
        }
        return undefined;
    }
    __getValuesForInsert(sqlBuilder) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            const result = (0, ITableOrView_1.__getValuesForInsert)(params[i], sqlBuilder);
            if (result) {
                return result;
            }
        }
        return undefined;
    }
    __isAllowed(sqlBuilder) {
        const params = this.__params;
        for (let i = 0, length = params.length; i < length; i++) {
            const result = (0, ITableOrView_1.__isAllowed)(params[i], sqlBuilder);
            if (!result) {
                return false;
            }
        }
        return true;
    }
}
exports.RawFragmentImpl = RawFragmentImpl;
