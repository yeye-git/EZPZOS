import type { DatabaseType } from "./QueryRunner";
import type { Connection, ResultSet } from 'any-db';
import * as begin from 'any-db-transaction';
import { PromiseBasedQueryRunner } from "./PromiseBasedQueryRunner";
/**
 * @deprecated
 */
export declare class AnyDBQueryRunner extends PromiseBasedQueryRunner {
    readonly database: DatabaseType;
    readonly connection: Connection;
    transaction?: begin.Transaction;
    constructor(connection: Connection);
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): Connection;
    getCurrentNativeTransaction(): begin.Transaction | undefined;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    protected executeQueryReturning(query: string, params: any[]): Promise<any[]>;
    protected executeMutation(query: string, params: any[]): Promise<number>;
    protected executeMutationReturning(query: string, params: any[]): Promise<any[]>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    isTransactionActive(): boolean;
    addParam(params: any[], value: any): string;
    protected query(query: string, params?: any[]): Promise<ResultSet>;
}
