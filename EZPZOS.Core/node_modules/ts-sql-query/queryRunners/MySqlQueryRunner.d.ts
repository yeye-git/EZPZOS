import type { DatabaseType } from "./QueryRunner";
import type { Connection } from "mysql";
import { PromiseBasedQueryRunner } from "./PromiseBasedQueryRunner";
export declare class MySqlQueryRunner extends PromiseBasedQueryRunner {
    readonly database: DatabaseType;
    readonly connection: Connection;
    private transactionLevel;
    constructor(connection: Connection, database?: 'mariaDB' | 'mySql');
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): Connection;
    getCurrentNativeTransaction(): undefined;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    protected executeQueryReturning(query: string, params: any[]): Promise<any[]>;
    protected executeMutation(query: string, params: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    isTransactionActive(): boolean;
    addParam(params: any[], value: any): string;
}
